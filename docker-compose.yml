version: '3.8'

#  개발용 환경입니다.
services:
  api-server:
    image: node:18.15-alpine
    container_name: api-server-dev
    depends_on:
      - postgresql
    expose:
      - "${APP_PORT}"
    networks:
      - backend
    volumes:
      - type: bind
        source: ./backend
        target: /app
    working_dir: /app
    command: npm run start:dev
    env_file:
      - .env

  front-server:
    image: node:18.15-alpine
    container_name: front-server-dev
    depends_on:
      - api-server
    expose:
      - "8081"
    networks:
      - backend
    volumes:
      - type: bind
        source: ./frontend
        target: /app
    working_dir: /app
    command: npm run dev
    env_file:
      - .env

  postgresql:
    image: postgres:15-alpine
    container_name: postgresql
    expose:
      - "${POSTGRES_PORT}"
    networks:
      - backend
    volumes:
      - type: bind
        source: /Users/${USER}/docker-volume/postgres-data
        target: /var/lib/postgresql/data
    env_file:
      - .env
    command: -p "${POSTGRES_PORT}"


  redis:
    image: bitnami/redis
    container_name: redis
    expose:
      - "${REDIS_PORT_NUMBER}"
    networks:
      - backend
    volumes:
      - type: bind
        source: /Users/${USER}/docker-volume/redis-data
        target: /bitnami
    env_file:
      - .env

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    networks:
      - backend
    restart: always
    ports:
      - "5050:80"
    volumes:
      - /Users/${USER}/docker-volume/pgadmin-data
    env_file:
      - .env

  nginx:
    image: nginx:1.23.4-alpine
    container_name: nginx
    ports:
      - "${EXTERNAL_PORT}:${NGINX_PORT}"
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/apply_nginx_env.sh:/apply_nginx_env.sh
      - /Users/${USER}/docker-volume/nginx-data/log:/var/log/nginx
    depends_on:
      - front-server
      - api-server
    command: ["/bin/sh", "/apply_nginx_env.sh"]

networks:
  backend:
    driver: bridge